spring.datasource.url=jdbc:h2:mem:movies-battle
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=sa
spring.datasource.initialization-mode=always

springdoc.api-docs.path=/api-docs

omdb.api.api-key=894dbc62

find.user.by.username.query=SELECT id, username, password FROM users WHERE username = :username
find.random.movie.query=SELECT imdb_id FROM movies ORDER BY RAND() LIMIT 1
find.random.movie.except.query=SELECT imdb_id FROM movies WHERE imdb_id != :imdb_id ORDER BY RAND() LIMIT 1

insert.quiz.query=INSERT INTO quizzes(id, user_id, score, total_correct_answers, total_wrong_answers, status) VALUES(:id, :user_id, :score, :total_correct_answers, :total_wrong_answers, :status)
find.quiz.by.id=SELECT q.id, q.score, q.total_correct_answers, q.total_wrong_answers, q.status, r.id, r.result, r.status, qs.id, qs.primary_movie_imdb_id, qs.secondary_movie_imdb_id FROM quizzes q INNER JOIN rounds r ON q.id = r.quiz_id INNER JOIN questions qs ON r.id = qs.round_id WHERE q.id = :id AND q.user_id = :user_id
update.quiz.by.id=UPDATE quizzes SET score = :score, total_correct_answers = :total_correct_answers, total_wrong_answers = :total_wrong_answers, status = :status WHERE id = :id

insert.round.query=INSERT INTO rounds(id, quiz_id, result, status) VALUES(:id, :quiz_id, :result, :status)
update.round.by.id=UPDATE rounds SET result = :result, status = :status WHERE id = :id

insert.question.query=INSERT INTO questions(id, round_id, primary_movie_imdb_id, secondary_movie_imdb_id) VALUES(:id, :round_id, :primary_movie_imdb_id, :secondary_movie_imdb_id)

find.ranking.positions.query=SELECT u.username, (100.0 * COUNT(DISTINCT(q.id)) * COUNT(case result when 'CORRECT_ANSWER' then 1 else null end) / COUNT(*)) AS ranking_score FROM quizzes q INNER JOIN users u ON q.user_id = u.id INNER JOIN rounds r ON q.id = r.quiz_id  WHERE q.status != 'STARTED' AND r.result != 'PENDING' GROUP BY q.user_id ORDER BY (100.0 * COUNT(DISTINCT(q.id)) * COUNT(case result when 'CORRECT_ANSWER' then 1 else null end) / COUNT(*)) DESC 